// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

/**
 * from what I've noticed:
 * - in psql if a table name contains an upper case character
 * you have to select it with ""
 * SELECT * FROM user;   ✔️
 * SELECT * FROM "User";   ✔️
 * SELECT * FROM User;     ❌
 */

// Auth tables
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  firstName             String?
  lastName              String?
  userName              String?
  email                 String                 @unique
  password              String?
  role                  UserRole               @default(USER)
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  booksCreated          books[]                @relation("booksCreated")
  booksUpdated          books[]                @relation("booksUpdated")
  authorsCreated        authors[]              @relation("authorCreated")
  authorsUpdated        authors[]              @relation("authorUpdated")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id       String   @id @default(cuid())
  email    String
  emailOld String?
  token    String   @unique
  expires  DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// App tables

model authors {
  id            String   @id @unique @default(cuid())
  createdAt     DateTime @default(now())
  createdBy     User?    @relation("authorCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedAt     DateTime @updatedAt
  updatedBy     User?    @relation("authorUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?
  firstName     String
  lastName      String
  slug          String   @unique
  books         books[]  @relation("authorBooks")

  @@index([id, slug])
}

model books {
  id            String   @id @unique @default(cuid())
  createdAt     DateTime @default(now())
  createdBy     User?    @relation("booksCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedAt     DateTime @updatedAt
  updatedBy     User?    @relation("booksUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?
  title         String   @unique
  slug          String   @unique
  price         Float
  stock         Int
  author        authors  @relation("authorBooks", fields: [authorId], references: [id])
  authorId      String

  @@index([id, slug])
}
